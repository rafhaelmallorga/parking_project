openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/accounts/:
    get:
      operationId: accounts_retrieve
      tags:
      - accounts
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: accounts_create
      tags:
      - accounts
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/login/:
    post:
      operationId: login_create
      tags:
      - login
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthToken'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthToken'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
  /api/parking-lots/:
    get:
      operationId: parking_lots_list
      tags:
      - parking-lots
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DetailedParkingLot'
          description: ''
    post:
      operationId: parking_lots_create
      tags:
      - parking-lots
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParkingLot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ParkingLot'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ParkingLot'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingLot'
          description: ''
  /api/parking-lots/{parking_lot_id}/:
    get:
      operationId: parking_lots_retrieve
      parameters:
      - in: path
        name: parking_lot_id
        schema:
          type: integer
        required: true
      tags:
      - parking-lots
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedParkingLot'
          description: ''
    put:
      operationId: parking_lots_update
      parameters:
      - in: path
        name: parking_lot_id
        schema:
          type: integer
        required: true
      tags:
      - parking-lots
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: parking_lots_partial_update
      parameters:
      - in: path
        name: parking_lot_id
        schema:
          type: integer
        required: true
      tags:
      - parking-lots
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedParkingLot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedParkingLot'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedParkingLot'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingLot'
          description: ''
    delete:
      operationId: parking_lots_destroy
      parameters:
      - in: path
        name: parking_lot_id
        schema:
          type: integer
        required: true
      tags:
      - parking-lots
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    AuthToken:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        token:
          type: string
          readOnly: true
      required:
      - password
      - token
      - username
    DetailedParkingLot:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        owner:
          allOf:
          - $ref: '#/components/schemas/Owner'
          readOnly: true
        name:
          type: string
          maxLength: 127
        is_active:
          type: boolean
      required:
      - id
      - name
      - owner
    Owner:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        date_joined:
          type: string
          format: date-time
      required:
      - id
      - username
    ParkingLot:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 127
        is_active:
          type: boolean
        owner:
          type: integer
          readOnly: true
      required:
      - id
      - name
      - owner
    PatchedParkingLot:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 127
        is_active:
          type: boolean
        owner:
          type: integer
          readOnly: true
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
